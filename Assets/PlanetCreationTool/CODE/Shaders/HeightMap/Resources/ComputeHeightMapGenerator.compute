#pragma kernel CSMain
#pragma kernel CSRiversSources
#pragma kernel CSRiversStructure
#pragma kernel CSRiversSmoothing
#pragma kernel CSNormal

Texture2D<float> HeightInput;
Texture2D<float> HeightErodedInput;

RWTexture2D<float> HeightOutput;
RWTexture2D<float> HeightErodedOutput;
RWTexture2D<float> RiversStructureMap;
RWTexture2D<float> RiversMap;
RWTexture2D<float4> NormalOutput;

StructuredBuffer<float> HeightRemapData;
StructuredBuffer<float> RiversSourcesData;

float NoiseScale;
int OctaveCount;
float NoiseGain;
float NoiseLacunarity;
float NormalIntensity;
float NormalLimitation;
float AOIntensity;
float ErosionPower;
float ErosionSmoothness;
float RiversBedWidth;

float2 Position;
float Seed;

int VoronoiDistance;
int VoronoiResult;
int NoiseType;


//https://www.shadertoy.com/view/XlGcRh
float hashwithoutsine12(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float hash(float2 p)
{
    return hashwithoutsine12(p);
}

#define Euclidiean_Square 0
#define Euclidean 1
#define Manhattan 2
#define Chebyshev 3

#define Result_F1 0
#define Result_F2 1
#define Result_Difference 2
#define Result_Average 3

#define Rivers_Grid_Size 64
#define Grid_To_Texture_Ratio 32
#define Source_Size 1.0f

#define Downhill_Flow_Multiplier 1.5f
#define Uphill_Flow_Multiplier 100

float getVoronoiNoise(float2 p)
{
    float2 iPos = floor(p);
    float2 fPos = frac(p);
    
    float F1 = 10.0f;
    float F2 = 10.0f;
    
    for (int j = -1; j <= 1; j++)
    {
        for (int i = -1; i <= 1; i++)
        {
            float2 offsetXY = float2(i, j);
            float2 offset = float2(hash(iPos + offsetXY), hash(iPos + offsetXY + 100.0.xx));
            float2 relativePos = offsetXY + offset - fPos;

            float dist = 0.0f;
            switch (VoronoiDistance)
            {
                case Euclidiean_Square:
                    dist = relativePos.x * relativePos.x + relativePos.y * relativePos.y;
                    break;
                case Euclidean:
                    dist = length(relativePos);
                    break;
                case Manhattan:
                    dist = abs(relativePos.x) + abs(relativePos.y);
                    break;
                case Chebyshev:
                    dist = max(abs(relativePos.x), abs(relativePos.y));
                    break;
            }
            
            if (dist < F1)
            {
                F2 = F1;
                F1 = dist;
            }
            else if (dist < F2)
            {
                F2 = dist;
            }
        }
    }
    
    float result = 0.0f;
    
    switch (VoronoiResult)
    {
        case Result_F1:
            result = F1;
            break;
        case Result_F2:
            result = F2;
            break;
        case Result_Difference:
            result = F2 - F1;
            break;
        case Result_Average:
            result = (F1 + F2) * 0.5f;
            break;
    }
    
    return result;

}

#define PerlinNoise 0
#define VoronoiNoise 1

float getComposition(float2 p)
{
    float frequency = 1.0f;
    float amplitude = 1.0f;
    float result = 0.0f;
    float max_height = 0.0f;
    
    for (int octave = 0; octave < OctaveCount; octave++)
    {
        switch (NoiseType)
        {
            case PerlinNoise:
                break;
            case VoronoiNoise:
                result += getVoronoiNoise(p * frequency) * amplitude;
                break;

        }
        max_height += amplitude;
        
        frequency *= NoiseGain;
        amplitude *= NoiseLacunarity;
    }
    
    return result / max_height;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //float cell_size = 32;
    //float color = fmod(floor(id.x / cell_size) + floor(id.y / cell_size), 2);
    
    float height = getComposition(float2(id.xy) / NoiseScale + Position + Seed);
    
    int indexRemap = int(saturate(height) * 255.0);
    float fracRemap = frac(height * 255.0);
    
    float currentValue = HeightRemapData[indexRemap];
    float nextValue = HeightRemapData[min(indexRemap + 1, 255)];
    height = lerp(currentValue, nextValue, fracRemap);
    
    HeightOutput[id.xy] = height.x;
}

[numthreads(8, 8, 1)]
void CSRiversSources(uint3 id : SV_DispatchThreadID)
{
    float2 localpositionInCell;
    localpositionInCell.x = frac((float) id.x / (float) Grid_To_Texture_Ratio);
    localpositionInCell.y = frac((float) id.y / (float) Grid_To_Texture_Ratio);
    
    // Restrict the spawned rivers source location to the center of each cell
    float value;
    float centerZoneSize = (1.0f / ((float) Grid_To_Texture_Ratio)) * ((float) Source_Size);
    
    bool centerX = (localpositionInCell.x >= (0.5f - centerZoneSize)) && (localpositionInCell.x <= (0.5f + centerZoneSize));

    bool centerY = (localpositionInCell.y >= (0.5f - centerZoneSize)) && (localpositionInCell.y <= (0.5f + centerZoneSize));
    
    if (centerX && centerY)
    {
        int3 ajustedId = floor(id / Grid_To_Texture_Ratio); //Get the id on the 64x64 grid from the id in a 2048x2048 grid
        value = RiversSourcesData[ajustedId.x + (63 - ajustedId.y) * Rivers_Grid_Size];
    }
    else
    {
        value = 0;
    }
    
    RiversStructureMap[id.xy] = value;
}

[numthreads(8, 8, 1)]
void CSRiversStructure(uint3 threadId : SV_DispatchThreadID)
{   
    uint2 id = threadId.xy;
    uint2 id_up = id + uint2(0, 1);
    uint2 id_down = id + uint2(0, -1);
    uint2 id_left = id + uint2(-1, 0);
    uint2 id_right = id + uint2(1, 0);
    
    uint2 allNeighbours[4] = { id_up, id_down, id_left, id_right };
    
    float cellHeight = HeightInput[id];
    float flow = RiversStructureMap[id];
    uint2 lowestNeighbourId;
    float highestHeightVariation = 0;
    bool canFlow = false;
    
    // Only do the calculation for the cells containing water
    if (RiversStructureMap[id] < 0.1f)
    {
        return;
    }
    
    // Compare to each neighbouring cell
    for (int i = 0; i < 4; i++)
    {
        uint2 testedId = allNeighbours[i];
        float testedHeight = HeightInput[testedId];
        
        // Find the lowest neighbour if any
        float heightVariation = cellHeight - testedHeight;
        if (heightVariation > highestHeightVariation && (RiversStructureMap[testedId] < 0.5f || RiversStructureMap[id] <= 0.5f))
        {
            highestHeightVariation = heightVariation;
            lowestNeighbourId = testedId;
            canFlow = true;
        }
        
        
        //Backup calculation
        /*
        float flowModifier = 0;
        if (heightVariation >= 0)
        {
            flowModifier = lerp(heightVariation, 1, max(Downhill_Flow_Multiplier, 1));
        }
        else
        {
            flowModifier = 1 / lerp(abs(heightVariation), 1, max(Uphill_Flow_Multiplier, 1));
        }
        
        float neighborOriginalFlow = RiversMap[testedId];
        float neighborFlow = max(neighborOriginalFlow, flow * flowModifier);
        
        RiversMap[testedId] = neighborFlow;
        */
    }
    
    //RiversStructureMap[id] = 0.0f;
    
    
    if (canFlow)
    {      
        // If there is a lower neighbour, fill the lowest with water with a normal flow (0.5)
        RiversStructureMap[lowestNeighbourId] = max(RiversStructureMap[lowestNeighbourId], 0.5f);
    }
    else
    {
        // If there is no lower neighbour, increase the flow to all empty neighbours to indicate an overflow
        if (RiversStructureMap[id] >= 0.9f)
        {
            return;
        }
        else
        {
            
            float newFlow;
        
            for (int i = 0; i < 4; i++)
            {
                newFlow = RiversStructureMap[id] + 0.1f;
                
                RiversStructureMap[allNeighbours[i]] = max(RiversStructureMap[allNeighbours[i]], newFlow);
            }
            
            RiversStructureMap[id] = newFlow;

        }
    }
}

[numthreads(8, 8, 1)]
void CSRiversSmoothing(uint3 threadId : SV_DispatchThreadID)
{
    uint2 id = threadId.xy;
    uint2 id_up = id + uint2(0, 1);
    uint2 id_down = id + uint2(0, -1);
    uint2 id_left = id + uint2(-1, 0);
    uint2 id_right = id + uint2(1, 0);
    
    // Rescale every river source and river bed to 1
    if (RiversStructureMap[id] > 0.0f)
    {
        RiversMap[id] = 1.0f;
    }
    else
    {
        // For all other cells, do an average of all neighbouring cell flow
        float averageFlow = (RiversMap[id_up] + RiversMap[id_down] + RiversMap[id_left] + RiversMap[id_right]) / 4;
        float flowPower = pow(abs(averageFlow), 1.1f);
    
        RiversMap[id] = flowPower;
    }
    
    // Subtract the rivers flow to the heightmap to reflect water erosion
    HeightErodedOutput[id] = HeightErodedInput[id] - ErosionPower * min(pow(abs(RiversMap[id]), (1.0f - ErosionSmoothness)), (1.0f - RiversBedWidth));
}


groupshared float tempHeight[8 * 3][8 * 3];

[numthreads(8,8,1)]
void CSNormal(uint3 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID)
{
    uint2 origin = id.xy - gtid.xy - int2(8, 8);
    
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            tempHeight[gtid.x * 3 + i][gtid.y * 3 + j] = HeightInput[origin + gtid.xy * 3 + int2(i, j)].r;

        }
    }
    
    GroupMemoryBarrierWithGroupSync();

    int2 gtidOffset = gtid.xy + int2(8, 8);
    
    // Acces all 8 neighbors
    float h00 = tempHeight[gtidOffset.x - 1][gtidOffset.y - 1];
    float h10 = tempHeight[gtidOffset.x    ][gtidOffset.y - 1];
    float h20 = tempHeight[gtidOffset.x + 1][gtidOffset.y - 1];
    float h01 = tempHeight[gtidOffset.x - 1][gtidOffset.y    ];
    float h11 = tempHeight[gtidOffset.x    ][gtidOffset.y    ];
    float h21 = tempHeight[gtidOffset.x + 1][gtidOffset.y    ];
    float h02 = tempHeight[gtidOffset.x - 1][gtidOffset.y + 1];
    float h12 = tempHeight[gtidOffset.x    ][gtidOffset.y + 1];
    float h22 = tempHeight[gtidOffset.x + 1][gtidOffset.y + 1];
    
    //float Gx = frac(saturate((h00 - h20 + 2.0 * h01 - 2.0 * h21 + h02 - h22) * NormalLimitation)) * NormalIntensity; // Difference between left and right neighbors
    //float Gy = frac(saturate((h00 - h02 + 2.0 * h10 - 2.0 * h12 + h20 - h22) * NormalLimitation)) * NormalIntensity; // Difference between top and bottom neighbors
    float Gx = clamp(h00 - h20 + 2.0 * h01 - 2.0 * h21 + h02 - h22, -1, NormalLimitation) * NormalIntensity * (1 - floor(id.x / 2047)); // Difference between left and right neighbors
    float Gy = clamp(h00 - h02 + 2.0 * h10 - 2.0 * h12 + h20 - h22, -1, NormalLimitation) * NormalIntensity * (1 - floor(id.y / 2047)); // Difference between top and bottom neighbors
    float Gz = 0.5 * sqrt(max(0.0, 1.0 - Gx * Gx - Gy * Gy)); // Regenerate z component
    
    float3 normal = normalize(float3(2.0 * Gx, 2.0 * Gy, Gz));
    
    
    // AO
    float ao = 0.0f;
    float pi2 = 6.283185f;
    float sampleCount = 15.0f;
    
    for (float angle = 0.0f; angle < pi2; angle += (pi2 / sampleCount))
    {
        float maxAngle = -1.0f;
        float2 direction = float2(sin(angle), cos(angle));
        
        for (float s = 2; s < 8; s++)
        {
            int2 offset = s * direction;
            float height = tempHeight[gtidOffset.x + offset.x][gtidOffset.y + offset.y];
            float deltaHeight = (height - h11) * AOIntensity;
            
            float3 neighborDirection = normalize(float3(direction.x, direction.y, deltaHeight));
            float dotProduct = dot(neighborDirection, float3(0.0, 0.0, 1.0));
            
            maxAngle = max(maxAngle, dotProduct);
        }
        
        ao += max(0.0, maxAngle);
    }
    
    ao /= sampleCount;
    
    NormalOutput[id.xy] = float4(normal, 1.0 - ao);
}
